<% upload_limit_mb = 10 %>
<div id="uploader">Loading uploader...</div>

<% content_for :post_js do %>
<script type="text/javascript" charset="utf-8">
  $(function(){
    $("#uploader").pluploadQueue({
      runtimes: 'html5,flash,silverlight',
      url: '<%= attachables_path %>',
      multipart_params: {
        '<%= request_forgery_protection_token %>': '<%= form_authenticity_token %>',
        '<%= Rails.application.config.session_options[:key] %>': '<%= request.session_options[:id] %>', 
      }, 
      filters : {
  			max_file_size : '<%= upload_limit_mb %>mb',
  			mime_types: [
  				{ title : "Audio files", extensions : "mp3" }, 
  				{ title : "Video files", extensions : "mp4,mov" }, 
  				{ title : "Image files", extensions : "jpg,png" }, 
  				{ title : "Spreadsheets", extensions : "csv" }
  			]
  		}, 
      // PreInit events, bound before any internal events
      preinit : {
        Init: function(up, info) {
          console.log('[Init]', 'Info:', info, 'Features:', up.features);
        },

        UploadFile: function(up, file) {
          console.log('[UploadFile]', file);

          // You can override settings before the file is uploaded
          // up.setOption('url', 'upload.php?id=' + file.id);
          // up.setOption('multipart_params', {param1 : 'value1', param2 : 'value2'});
        }
      },
      // Post init events, bound after the internal events
      init : {
        PostInit: function() {
          // Called after initialization is finished and internal event handlers bound
          console.log('[PostInit]');

          /*document.getElementById('uploadfiles').onclick = function() {
            uploader.start();
            return false;
          };*/
        },

        Browse: function(up) {
          // Called when file picker is clicked
          console.log('[Browse]');
        },

        Refresh: function(up) {
          // Called when the position or dimensions of the picker change
          console.log('[Refresh]');
        },

        StateChanged: function(up) {
          // Called when the state of the queue is changed
          console.log('[StateChanged]', up.state == plupload.STARTED ? "STARTED" : "STOPPED");
        },

        QueueChanged: function(up) {
          // Called when queue is changed by adding or removing files
          console.log('[QueueChanged]');
        },

        OptionChanged: function(up, name, value, oldValue) {
          // Called when one of the configuration options is changed
          console.log('[OptionChanged]', 'Option Name: ', name, 'Value: ', value, 'Old Value: ', oldValue);
        },

        BeforeUpload: function(up, file) {
          // Called right before the upload for a given file starts, can be used to cancel it if required
          console.log('[BeforeUpload]', 'File: ', file);
        },

        UploadProgress: function(up, file) {
          // Called while file is being uploaded
          console.log('[UploadProgress]', 'File:', file, "Total:", up.total);
        },

        FileFiltered: function(up, file) {
          // Called when file successfully files all the filters
          console.log('[FileFiltered]', 'File:', file);
        },

        FilesAdded: function(up, files) {
          // Called when files are added to queue
          console.log('[FilesAdded]');

          plupload.each(files, function(file) {
            console.log('  File:', file);
          });
        },

        FilesRemoved: function(up, files) {
          // Called when files are removed from queue
          console.log('[FilesRemoved]');

          plupload.each(files, function(file) {
            console.log('  File:', file);
          });
        },

        FileUploaded: function(up, file, info) {
          // Called when file has finished uploading
          console.log('[FileUploaded] File:', file, "Info:", info);
        },

        ChunkUploaded: function(up, file, info) {
          // Called when file chunk has finished uploading
          console.log('[ChunkUploaded] File:', file, "Info:", info);
        },

        UploadComplete: function(up, files) {
          // Called when all files are either uploaded or failed
          console.log('[UploadComplete]');
          $("#new_moment").closest("form").submit();
        },

        Destroy: function(up) {
          // Called when uploader is destroyed
          console.log('[Destroy] ');
        },

        Error: function(up, args) {
          // Called when error occurs
          console.log('[Error] ', args);
          $('<hr/><p class="red"><strong>ERROR:</strong> ' + JSON.parse(args.response).file_upload.error + '</p>').insertAfter('#uploader');
        }
      }
    });
  });
</script>
<% end %>
